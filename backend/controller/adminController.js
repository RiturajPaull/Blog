import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import BlogModel from "../model/BlogModel.js";
import CommentModel from "../model/CommentModel.js";

dotenv.config();

export const adminLogin = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (
      email !== process.env.ADMIN_EMAIL ||
      password !== process.env.ADMIN_PASSWORD
    ) {
      return res.status(400).json({
        message: "Invalid Credentials",
        success: false,
      });
    }
    const token = await jwt.sign({ email }, process.env.TOKEN_SECRET_KEY);
    if (!token) {
      return res.status(400).json({
        message: "Token not generated by JWT.",
        success: false,
      });
    }
    return res.status(200).json({
      message: "Logged in successfully",
      success: true,
      token,
    });
  } catch (error) {
    return res.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};

export const getAllBlogAdmin = async (req, resp) => {
  try {
    const blogs = await BlogModel.find().sort({ creadtedAt: -1 });
    return resp.status(200).json({
      message: "Get All Blogs",
      success: true,
      blogs,
    });
  } catch (error) {
    return resp.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};

export const getAllComments = async (req, resp) => {
  try {
    const comment = await CommentModel.find({})
      .populate("blog")
      .sort({ createdAt: -1 });

    return resp.status(200).json({
      message: "All coments",
      success: true,
      comment,
    });
  } catch (error) {
    return resp.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};

export const getDashboardData = async (req, resp) => {
  try {
    const recentBlogs = await BlogModel.find({})
      .sort({ createdAt: -1 })
      .limit(5);
    const blogs = await BlogModel.countDocuments();
    const comments = await CommentModel.countDocuments();
    const drafts = await BlogModel.countDocuments({ isPublished: false });

    const dashboardData = {
      blogs,
      comments,
      drafts,
      recentBlogs,
    };

    return resp.status(200).json({
      message: "Dashboard data fetched",
      success: true,
      dashboardData,
    });
  } catch (error) {
    return resp.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};

export const deleteCommentById = async (req, resp) => {
  try {
    const { id } = req.body;

    await CommentModel.findByIdAndDelete(id);
    return resp.status(200).json({
      message: "Comment deleted!!",
      success: true,
    });
  } catch (error) {
    return resp.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};

export const approveCommentByid = async (req, resp) => {
  try {
    const { id } = req.body;
    await CommentModel.findByIdAndUpdate(id, { isApproved: true });

    return resp.status(200).json({
      message: "Comment Approved",
      success: true,
    });
  } catch (error) {
    return resp.status(500).json({
      message: error.message || error,
      success: false,
    });
  }
};
